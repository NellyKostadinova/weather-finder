{"version":3,"sources":["components/WeatherForm.js","components/WeatherDisplay.js","App.js","serviceWorker.js","index.js"],"names":["WeatherForm","props","cityInput","React","createRef","countryInput","className","onSubmit","e","preventDefault","city","current","value","country","queryString","fetch","then","response","handleErrors","json","alpha2Code","fetchWeather","catch","error","changeErrorMessage","ref","placeholder","type","errorMessage","id","onClick","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","positionError","console","log","WeatherDisplay","weather","src","icon","alt","currentTemp","minTemp","maxTemp","humidity","pressure","sunrise","sunset","App","useState","displayProps","setDisplayProps","setErrorMessage","ok","Error","statusText","displayErrorMessage","createDisplayProps","data","name","main","Math","round","temp","temp_max","temp_min","Date","sys","toLocaleTimeString","map","key","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0753cc51.chunk.js","sourcesContent":["import React from 'react';\r\nimport './WeatherForm.css';\r\n\r\nfunction WeatherForm(props) {\r\n  let cityInput = React.createRef();\r\n  let countryInput = React.createRef();\r\n\r\n  let getInputWeather = (e) => {\r\n    e.preventDefault();\r\n    let city = cityInput.current.value;\r\n    let country = countryInput.current.value;\r\n    let queryString = '';\r\n\r\n    if (country) {\r\n      fetch(`https://restcountries.eu/rest/v2/name/${country}?fullText=true`)\r\n        .then((response) => props.handleErrors(response))\r\n        .then((response) => response.json())\r\n        .then((response) => (queryString = `q=${city},${response[0].alpha2Code}`))\r\n        .then(() => props.fetchWeather(queryString))\r\n        .catch((error) => props.changeErrorMessage());\r\n    } else {\r\n      props.fetchWeather(`q=${city}`);\r\n    }\r\n\r\n    cityInput.current.value = '';\r\n    countryInput.current.value = '';\r\n  };\r\n\r\n  let getCurrentPositionWeather = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      function(position) {\r\n        props.fetchWeather(`lat=${position.coords.latitude}&lon=${position.coords.longitude}`);\r\n      },\r\n      function(positionError) {\r\n        console.log(positionError);\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"weatherForm\">\r\n      <form onSubmit={getInputWeather}>\r\n        <input ref={cityInput} placeholder=\"City\" />\r\n        <input ref={countryInput} placeholder=\"Country\" />\r\n        <button type=\"submit\">Show weather</button>\r\n      </form>\r\n      <div className=\"error-message\">{props.errorMessage}</div>\r\n      <button id=\"positionBtn\" onClick={getCurrentPositionWeather}>\r\n        Use my position\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherForm;\r\n","import React from 'react';\r\nimport './WeatherDisplay.css';\r\n\r\nfunction WeatherDisplay(props) {\r\n  return (\r\n    <div className=\"weatherDisplay\">\r\n      <div className=\"one-column\">\r\n        <h3 className=\"city\">{props.city}</h3>\r\n        <h2 className=\"weather-description\">{props.weather}</h2>\r\n        <div className=\"weather-icon\">\r\n          <img src={props.icon} alt={props.weather} />\r\n        </div>\r\n      </div>\r\n      <div className=\"two-column\">\r\n        <div className=\"two-column__left\">\r\n          <div className=\"current-temp\">\r\n            <p>{props.currentTemp}</p>\r\n          </div>\r\n          <div className=\"min-temp\">{props.minTemp}</div>\r\n          <div className=\"max-temp\">{props.maxTemp}</div>\r\n        </div>\r\n        <div className=\"two-column__right\">\r\n          <h5>Details:</h5>\r\n          <p>Humidity: {props.humidity}</p>\r\n          <p>Pressure: {props.pressure}</p>\r\n          <p>Sunrise: {props.sunrise}</p>\r\n          <p>Sunset: {props.sunset}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherDisplay;\r\n","import React, { useState } from 'react';\nimport WeatherForm from './components/WeatherForm';\nimport WeatherDisplay from './components/WeatherDisplay';\nimport './App.css';\n\nfunction App() {\n  let [displayProps, setDisplayProps] = useState([{}]);\n  let [errorMessage, setErrorMessage] = useState('');\n\n  let fetchWeather = (queryString) => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?${queryString}&appid=3c102a502b2f3a1e4de7ea4ee566ec9b`\n    )\n      .then((response) => handleErrors(response))\n      .then((response) => response.json())\n      .then((response) => createDisplayProps(response))\n      .catch((error) => displayErrorMessage());\n  };\n\n  function handleErrors(response) {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n    return response;\n  }\n\n  let displayErrorMessage = () => {\n    setErrorMessage('Please enter a correct location.');\n  };\n\n  let createDisplayProps = (data) => {\n    console.log(data);\n    setDisplayProps([\n      ...displayProps,\n      {\n        city: data.name,\n        weather: data.weather[0].main,\n        icon: `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`,\n        currentTemp: `${Math.round(data.main.temp - 273.15)}°`,\n        maxTemp: `${Math.round(data.main.temp_max - 273.15)}°`,\n        minTemp: `${Math.round(data.main.temp_min - 273.15)}°`,\n        humidity: `${data.main.humidity}%`,\n        pressure: `${data.main.pressure}hPa`,\n        sunrise: new Date(data.sys.sunrise * 1000).toLocaleTimeString(),\n        sunset: new Date(data.sys.sunset * 1000).toLocaleTimeString()\n      }\n    ]);\n    setErrorMessage('');\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Weather Finder</h1>\n        <WeatherForm\n          fetchWeather={fetchWeather}\n          handleErrors={handleErrors}\n          changeErrorMessage={displayErrorMessage}\n          errorMessage={errorMessage}\n        />\n      </header>\n      <main>\n        {displayProps.map((props) =>\n          props.weather ? <WeatherDisplay key={displayProps.indexOf(props)} {...props} /> : null\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}